from random import randrange, randint


# 1.1
def is_multiple(n, m):
    return n // m != 0


# 1.2
def is_even(n):
    is_even = True
    for i in range(1, n + 1):
        is_even = not is_even
    return is_even


# 1.3
def minmax(data):
    min, max = data[0], 0
    for val in data:
        if val > max:
            max = val
        elif val < min:
            min = val
    return min, max


# 1.4 - 1.5
def sum_squares(n):
    return sum([k * k for k in range(1, n + 1) if n >= 1])


# 1.6 - 1.7
def sum_odd_squares(n):
    return sum([k * k for k in range(1, n + 1) if k % 2 != 0])


# 1.9
range(50, 90, 10)

# 1.10
range(8, -9, -2)

# 1.11
[1 << k for k in range(0, 9)]


# 1.12
def choice(data):
    return data[randrange(0, len(data))]


# 1.13
def reverse(data):
    return data[::-1]
    # return [data.pop() for _ in range(0, len(data))]


# 1.14
def odd_product(data):
    for j in range(len(data)):
        for i in range(len(data)):
            if (data[j] * data[i]) % 2 is not 0:
                return True
    return False


# 1.15
def distinct(data):
    return len(data) == len(set(data))


# 1.16 - 1.17 this function won't work because in each iteration val is recreated as view
# (not alias for iterable[index])
def scale(data, factor):
    for val in data:
        val = factor


# 1.18 promic numbers
[k * (k + 1) for k in range(10)]


# 1.19
def alphabet():
    return [chr(k) for k in range(97, 123)]


# 1.20
def shuffle(data):
    result = []
    for _ in range(len(data)):
        index = randint(0, len(data) - 1)
        temp = data[index]
        result.append(temp)
        data.remove(temp)
    return result

